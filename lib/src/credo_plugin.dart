import 'dart:async';

import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_credo/core/utils/util.dart';
import 'package:flutter_credo/flutter_credo.dart';
import 'package:flutter_credo/src/domain/repositories/credo_sdk_repository.dart';

class CredoPlugin extends Equatable {
  final String publicKey;

  /// Initialize the Credo object. It should be called as early as possible
  /// (preferably in initState() of the Widget.
  ///
  /// [publicKey] - your Credo public key. This is mandatory
  ///
  ///

  CredoPlugin({required this.publicKey});

  @override
  List<Object> get props => [publicKey];

  String get getPublicKey {
    // Validate that the sdk has been initialized
    _performChecks();
    return this.publicKey;
  }

  void _performChecks() {
    //check for null value, and length and starts with pk_
    if (this.publicKey.isEmpty) {
      throw new CredoException(message: Utils.getKeyErrorMsg('public'));
    }
  }

  /// Initial payment and get a paymentSlug that will be used for payment
  ///
  ///
  /// [currency] - the orderCurrency example NGN.
  ///
  /// [transRef] - transRef is a unique transaction reference used to track payment, this was gotten from initial payment.
  ///
  /// [customerEmail] - tthe customer's email.
  ///
  /// [amount] - the order amount.
  ///
  /// [customerName] - the customer's name.
  ///
  /// [customerPhoneNo] - the customer's phone number
  ///
  /// [paymentSlug] - paymentSlug was generated by [Credo] during initialize payment.
  ///
  /// returns [InitPaymentResponse]
  ///
  /// throw  [CredoException] if any error is encountered

  Future<InitPaymentResponse> initialPayment({
    required double amount,
    required String currency,
    String? redirectUrl,
    String? transactionRef,
    String? paymentOptions,
    required String customerEmail,
    required String customerName,
    required String customerPhoneNo,
  }) async {
    _performChecks();

    CredoSdkRepository credoSdkRepository = CredoSdkRepository();
    final verified = await credoSdkRepository.initialPayment(
      amount: amount,
      currency: currency,
      customerEmail: customerEmail,
      customerName: customerName,
      customerPhoneNo: customerPhoneNo,
      publicKey: this.publicKey,
      transactionRef: transactionRef,
      paymentOptions: paymentOptions,
      redirectUrl: redirectUrl,
    );

    return verified.fold((CredoException credoException) {
      throw credoException;
    }, (InitPaymentResponse initPaymentResponseModel) {
      return initPaymentResponseModel;
    });
  }

  /// Initial payment and pay using Credo web payment UI
  ///
  ///
  /// [currency] - the orderCurrency example NGN.
  ///
  /// [transRef] - transRef is a unique transaction reference used to track payment, this was gotten from initial payment.
  ///
  /// [customerEmail] - tthe customer's email.
  ///
  /// [amount] - the order amount.
  ///
  /// [customerName] - the customer's name.
  ///
  /// [customerPhoneNo] - the customer's phone number
  ///
  /// [paymentSlug] - paymentSlug was generated by [Credo] during initialize payment.
  ///
  /// returns [InitPaymentResponse]
  ///
  /// throw  [CredoException] if any error is encountered

  Future<bool> payWithWebUI({
    required BuildContext context,
    required double amount,
    required String currency,
    String? redirectUrl,
    String? transactionRef,
    String? paymentOptions,
    required String customerEmail,
    required String customerName,
    required String customerPhoneNo,
  }) async {
    _performChecks();
    CredoSdkRepository credoSdkRepository = CredoSdkRepository();
    final verified = await credoSdkRepository.initialPayment(
      amount: amount,
      currency: currency,
      customerEmail: customerEmail,
      customerName: customerName,
      customerPhoneNo: customerPhoneNo,
      publicKey: this.publicKey,
      transactionRef: transactionRef,
      paymentOptions: paymentOptions,
      redirectUrl: redirectUrl,
    );
    return verified.fold(
      (CredoException credoException) {
        throw credoException;
      },
      (InitPaymentResponse initPaymentResponseModel) async {
        var res = await credoSdkRepository.showPaymentDialog(
          context: context,
          initPaymentResponse: initPaymentResponseModel,
        );
        return res;
      },
    );
  }
}
